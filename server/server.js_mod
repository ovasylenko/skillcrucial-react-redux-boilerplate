import express from 'express'
import path from 'path'
import cors from 'cors'
import bodyParser from 'body-parser'
import sockjs from 'sockjs'
import { renderToStaticNodeStream } from 'react-dom/server'
import React from 'react'
import axios from 'axios'

import cookieParser from 'cookie-parser'
import config from './config'
import Html from '../client/html'

const Root = () => ''

try {
  // eslint-disable-next-line import/no-unresolved
  // ;(async () => {
  //   const items = await import('../dist/assets/js/root.bundle')
  //   console.log(JSON.stringify(items))

  //   Root = (props) => <items.Root {...props} />
  //   console.log(JSON.stringify(items.Root))
  // })()
  console.log(Root)
} catch (ex) {
  console.log(' run yarn build:prod to enable ssr')
}

// const { readFile, writeFile, stat, unlink, appendFile } = require("fs").promises
const { readFile, writeFile } = require('fs').promises

let connections = []

const port = process.env.PORT || 8090
const server = express()

const setHeaders = (req, res, next) => {
  res.set('x-skillcrucial-user', '065d57cc-b8b2-4f45-95c6-e2fbdecce304')
  res.set('Access-Control-Expose-Headers', 'X-SKILLCRUCIAL-USER')
  next()
}

const middleware = [
  cors(),
  express.static(path.resolve(__dirname, '../dist/assets')),
  bodyParser.urlencoded({ limit: '50mb', extended: true, parameterLimit: 50000 }),
  bodyParser.json({ limit: '50mb', extended: true }),
  cookieParser(),
  setHeaders
]

middleware.forEach((it) => server.use(it))

// const readFromFile = () => {
//   const text = readFile(`${__dirname}/users.json`, { encoding: "utf8" }) 
//   JSON.parse(text)
// } 
//
// const readFromFile = () => {
//   readFile(`${__dirname}/users.json`, { encoding: "utf8" })  
//   .then(text => {  
//     res.json(JSON.parse(text))  
//   })  
//   .catch(err => {  
//      const url = 'https://jsonplaceholder.typicode.com/users'
//      const text = await axios(url).then((users) => JSON.stringify(users.data))
//      writeFile(`${__dirname}/users.json`, text, { encoding: 'utf8' }) 
//   }) 
// }

// server.get('/api/v1/users', async (req, res) => {
//   readFromFile
//   res.json(JSON.parse(text))
// })
const dataPath = `${__dirname}/users.json`

const readFromFile = (callback, returnJson = false, filePath = dataPath, encoding = 'utf8') => {
  readFile(filePath, encoding, (err, data) => {
      if (err) {
          throw err
      }
      callback(returnJson ? JSON.parse(data) : data)
  })
}

const writeToFile = (fileData, callback, filePath = dataPath, encoding = 'utf8') => {
  writeFile(filePath, fileData, encoding, (err) => {
      if (err) {
          throw err
      }
      callback()
  });
};



server.get('/api/v1/users', async (req, res) => {
  const url = 'https://jsonplaceholder.typicode.com/users'
  const text = await axios(url).then((users) => JSON.stringify(users.data))
  writeFile(`${__dirname}/users.json`, text, { encoding: 'utf8' })
  res.json(JSON.parse(text))
})

server.post('/api/v1/users', (req, res) => {
  readFromFile(data => {
    const newUserId = Object.keys(data).length + 1;
    data[newUserId.toString()] = req.body;
    writeToFile((data, null, 2), () => {
      res.status(200).send({ status: 'success', id: newUserId });
    });
  });
});


// server.post('/api/v1/users', (req, res) => {
//   const text = readFile(`${__dirname}/users.json`, { encoding: "utf8" })
//   writeFile(`${__dirname}/users.json`, text, { encoding: 'utf8' })
//   res.json(JSON.parse(text))
// })

// server.post('/api/v1/users', (req, res) => {
//   const text = readFile(`${__dirname}/users.json`, { encoding: "utf8" }).then(users => {  
//     JSON.stringify(users.data)
//   })
//   console.log(text)
//   appendFile(`${__dirname}/users.json`, text, { encoding: 'utf8' })
//   res.json(JSON.parse(text))
// })

// server.delete('/api/v1/users/:userId', (req, res) => {
//   const { user } = req.params
//   res.json({ id: 0, ...req.body })
// })

server.use('/api/', (req, res) => {
  res.status(404)
  res.end()
})

const [htmlStart, htmlEnd] = Html({
  body: 'separator',
  title: 'Skillcrucial - Become an IT HERO'
}).split('separator')

server.get('/', (req, res) => {
  const appStream = renderToStaticNodeStream(<Root location={req.url} context={{}} />)
  res.write(htmlStart)
  appStream.pipe(res, { end: false })
  appStream.on('end', () => {
    res.write(htmlEnd)
    res.end()
  })
})

server.get('/*', (req, res) => {
  const initialState = {
    location: req.url
  }

  return res.send(
    Html({
      body: '',
      initialState
    })
  )
})

const app = server.listen(port)

if (config.isSocketsEnabled) {
  const echo = sockjs.createServer()
  echo.on('connection', (conn) => {
    connections.push(conn)
    conn.on('data', async () => {})

    conn.on('close', () => {
      connections = connections.filter((c) => c.readyState !== 3)
    })
  })
  echo.installHandlers(app, { prefix: '/ws' })
}
console.log(`Serving at http://localhost:${port}`)
